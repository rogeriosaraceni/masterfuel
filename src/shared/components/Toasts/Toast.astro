---
interface Props {
    dataToastType: string,
    bgColorClass: string,
    textColorClass: string,
    icon: string,
    msg: string,
    btnCloseColorClass?: string
}

const { dataToastType, bgColorClass, textColorClass, icon, msg, btnCloseColorClass} = Astro.props
---

<div class="toast-container toast-app">
    <div 
        data-toast-type={dataToastType}             
        class="toast" 
        role="alert" 
        aria-live="assertive" 
        aria-atomic="true" 
    >
        <div class={bgColorClass}>
            <div class={textColorClass}>
                <div class="d-flex">
                    <div class="toast-body d-flex align-items-center gap-2">
                        <div class="fs-4">
                            <i class={icon}></i>
                        </div>
                        <strong>{msg}</strong>
                    </div>

                    <button 
                        type="button" 
                        class={`btn-close ${btnCloseColorClass} me-2 m-auto`}
                        data-bs-dismiss="toast" 
                        aria-label="Close"
                    >
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .toast-container.toast-app{
        position: fixed;
        top: 0;
        right: 0;
        padding: 1rem;
    }
    .toast-container.toast-app .toast{
        align-items: center;
        border: 0;
        --bs-toast-max-width: 650px;
    }
</style>

<script is:inline>
    window.addEventListener('load', () => {
        const showToasts = document.querySelectorAll('[data-toast-target]')

        for(const item of showToasts){
            item.addEventListener('click', (event) => {
                event.preventDefault()
                
                const target = item.getAttribute('data-toast-target')
                const toastElement = document.querySelector(`[data-toast-type="${target}"]`)
                
                if (toastElement) {
                    setTimeout(() => {
                        const toast = new bootstrap.Toast(toastElement);
                        toast.show();
                    }, 3200);
                }
            })
        }
    })
</script>
